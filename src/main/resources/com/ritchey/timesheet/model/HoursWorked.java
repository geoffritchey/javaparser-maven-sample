package com.ritchey.timesheet.model;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Set;

import org.apache.commons.lang.time.DateUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

// Generated Feb 6, 2009 11:36:48 AM by Hibernate Tools 3.2.2.GA

/**
 * HoursWorked generated by hbm2java
 */
public class HoursWorked implements java.io.Serializable {

	private static Log log = LogFactory.getLog(HoursWorked.class);
	private Job codeJobs;

	private String peopleId;
	private Job job;
	private Date punched;
	private WorkCode workcode;
	private Date punchedOut;
	private Integer hoursWorkedId = null;
	private Date approved;
	private String approvedBy;
	private Integer processed;
	private Integer timesheetId;
	private boolean fulltime;
	private String lastUpdateBy;
	
	/**
	 * Make a copy of hours worked specifically for multiple days of vacation
	 * @param w
	 */
	public HoursWorked(HoursWorked w) {
		super();
		this.codeJobs = w.codeJobs;
		this.peopleId = w.peopleId;
		this.job = w.job;
		this.punched = w.punched;
		this.workcode = w.workcode;
		this.punchedOut = w.punchedOut;
		this.fulltime = w.fulltime;
	}
	
	public String toString() {
		return "peopleId = " + peopleId + "\n" + 
			"job = " + job + "\n" + 
			"punched = " + punched + "\n" + 
			"workcode = " + workcode + "\n" + 
			"punchedOut = " + punchedOut + "\n" + 
			"hoursWorkedId = " + hoursWorkedId + "\n" + 
			"";
	}

	public String getPeopleId() {
		return peopleId;
	}

	public void setPeopleId(String peopleId) {
		this.peopleId = peopleId;
	}

	public Job getJob() {
		return job;
	}

	public void setJob(Job job) {
		this.job = job;
	}

	public Date getPunched() {
		return punched;
	}

	public void setPunched(Date punched) {
		this.punched = punched;
	}

	public WorkCode getWorkcode() {
		return workcode;
	}

	public void setWorkcode(WorkCode workcode) {
		this.workcode = workcode;
	}

	public Date getPunchedOut() {
		return punchedOut;
	}

	public void setPunchedOut(Date punchedOut) {
		this.punchedOut = punchedOut;
	}

	public Integer getHoursWorkedId() {
		return hoursWorkedId;
	}

	public void setHoursWorkedId(Integer hoursWorkedId) {
		this.hoursWorkedId = hoursWorkedId;
	}

	public Date getApproved() {
		return approved;
	}
	
	public boolean getIsApproved() {
		return approved != null;
	}
	
	public void setIsApproved(Boolean approved) {
		if (approved)
			this.approved = new Date();
		else
			this.approved = null;
	}
	
	public String getDayString() {
		return new SimpleDateFormat("MM/dd/yyyy").format(punched);
	}

	public void setApproved(Date approved) {
		this.approved = approved;
	}

	public String getApprovedBy() {
		return approvedBy;
	}

	public void setApprovedBy(String approvedBy) {
		this.approvedBy = approvedBy;
	}

	public Integer getProcessed() {
		return processed;
	}

	public void setProcessed(Integer processed) {
		this.processed = processed;
	}

	public Integer getTimesheetId() {
		return timesheetId;
	}

	public void setTimesheetId(Integer timesheetId) {
		this.timesheetId = timesheetId;
	}
 
	public HoursWorked() {
	}

	public Job getCodeJobs() {
		return this.codeJobs;
	}

	public void setCodeJobs(Job codeJobs) {
		this.codeJobs = codeJobs;
	}
	
	public Boolean isJobInGroup(Set<Long> jobs) {
		if (jobs == null)
			return false;
		if (job.getId() == null) 
			return false;
		return jobs.contains(job.getId());
	}
	
	public Double getHours() {
		if (getPunched() == null || getPunchedOut() == null) {
			return 0.0;
		}
		return new Double((punchedOut.getTime() - punched.getTime()) / (60.0 * 60.0 * 10)).intValue()/100.0;
	}
	
	public void setTimeIn(Date time) {
		setPunched(combineDateTime(getPunched(), time));
	}
	
	public Date getTimeIn() {
		return getPunched();
	}
	
	public void setTimeOut(Date time) {
		setPunchedOut(combineDateTime(getPunchedOut(), time));
	}
	
	public Date getTimeOut() {
		return getPunchedOut();
	}
	
	public boolean getCanApprove() {
		if (punchedOut == null)
			return false;
		Long dayCount = getDayCount();
		log.debug("dayCount = " + dayCount);
		return (dayCount == 0);
	}
	
	public Date getDateIn() {
		return getPunched();
	}
	
	public void setDateIn(Date date) {
		Boolean outNextDay = false;
		setPunched(combineDateTime(date, getPunched()));
	}
	
	public Date getDateOut() {
		return getPunchedOut();
	}
	
	public void setDateOut(Date date) {
		setPunchedOut(combineDateTime(date, getPunchedOut()));
	}
	
	public Long getDayCount() {
		if (getPunched() == null || getPunchedOut() == null) 
			return null;
		Long dayCount = (getPunchedOut().getTime()- getPunched().getTime())/(60 * 60 * 1000 *24);
		return dayCount;
	}
	
	/**
	 * return a Date with the date
	 * from the first argument and the time of day from
	 * the second argument.
	 * 
	 * @param day
	 * @param time
	 * @return
	 */
	public Date combineDateTime(Date day, Date time) {
		
		if (day == null) {
			day = new Date();
			if (punched != null)
				day = punched;
		}
		if (time == null)
			time = new Date();
		
		Calendar c = new GregorianCalendar();
		c.setTime(time);
		int hours = c.get(Calendar.HOUR_OF_DAY);
		int min = c.get(Calendar.MINUTE);
		
		c.setTime(day);
		c.set(Calendar.HOUR_OF_DAY, hours);
		c.set(Calendar.MINUTE, min);
		return c.getTime();
	}

	public Boolean getFulltime() {
		return fulltime;
	}

	public void setFulltime(Boolean fulltime) {
		this.fulltime = fulltime;
	}

	public String getLastUpdateBy() {
		return lastUpdateBy;
	}

	public void setLastUpdateBy(String lastUpdateBy) {
		this.lastUpdateBy = lastUpdateBy;
	}

}
