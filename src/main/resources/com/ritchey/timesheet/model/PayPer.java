package com.ritchey.timesheet.model;

// Generated Feb 6, 2009 11:36:48 AM by Hibernate Tools 3.2.2.GA

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Set;

/**
 * PayPer generated by hbm2java
 */
public class PayPer implements java.io.Serializable {

	private Date beginDate;
	private CodeTerm codeTerm;
	private Date endDate;
	private String ppYear;
	private Integer payId;
	private boolean fulltime = false;
	private Set timesheetses = new HashSet(0);

	public PayPer() {
	}

	public PayPer(Date beginDate, CodeTerm CodeTerm, Date endDate, int payId) {
		this.beginDate = beginDate;
		this.codeTerm = CodeTerm;
		this.endDate = endDate;
		this.payId = payId;
	}

	public PayPer(Date beginDate, CodeTerm codeTerm, Date endDate,
			String ppYear, int payId, Set timesheetses) {
		this.beginDate = beginDate;
		this.codeTerm = codeTerm;
		this.endDate = endDate;
		this.ppYear = ppYear;
		this.payId = payId;
		this.timesheetses = timesheetses;
	}

	public Date getBeginDate() {
		return this.beginDate;
	}

	public void setBeginDate(Date beginDate) {
		this.beginDate = beginDate;
	}

	public CodeTerm getCodeTerm() {
		return this.codeTerm;
	}

	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public String getPpYear() {
		return this.ppYear;
	}

	public void setPpYear(String ppYear) {
		this.ppYear = ppYear;
	}

	public Integer getPayId() {
		return this.payId;
	}

	public void setPayId(Integer payId) {
		this.payId = payId;
	}

	public Set getTimesheetses() {
		return this.timesheetses;
	}

	public void setTimesheetses(Set timesheetses) {
		this.timesheetses = timesheetses;
	}
	
	public String getDescription() {
		SimpleDateFormat f = Constants.displayDate;
		return codeTerm.getTerm() + ": " + f.format(beginDate) + " - " + 
					f.format(endDate);
	}
	
	public boolean getIsCurrent() {
		Calendar now = new GregorianCalendar();
		now.add(Calendar.MONTH, -1);
		Calendar end = new GregorianCalendar();
		end.setTime(endDate);
		end.add(Calendar.DAY_OF_MONTH, 1);
		boolean ret = (now.getTime().after(beginDate) && now.getTime().before(end.getTime()));
		//log.debug("now is " + now.getTime());
		//log.debug("between " + beginDate + " and " + end.getTime());
		//log.debug("Is Current = " + ret);
		return ret;
	}

	public void setCodeTerm(CodeTerm CodeTerm) {
		this.codeTerm = CodeTerm;
	}

	public boolean isFulltime() {
		return fulltime;
	}
	
	public boolean getFulltime() {
		return fulltime;
	}

	public void setFulltime(boolean fulltime) {
		this.fulltime = fulltime;
	}
	
	public String getStrFulltime() {
		if (fulltime) 
			return Constants.FULLTIME_STRING;
		return Constants.STUDENT_STRING;
		
	}
	
	public String getStrBeginDate() {
		return Constants.formatDate(beginDate);
	}
	
	public String getStrEndDate() {
		return Constants.formatDate(endDate);
	}


}
